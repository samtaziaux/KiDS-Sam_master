########################################################
########################################################
##
##  Demo configuration file for the KiDS-GGL pipeline
##
##  Update log:
##     2015-09-24 created by Cristobal Sifon
##
##
########################################################
########################################################

#######################################
###
### General instructions:
###         1) All parameters must be present in the file.
###         2) The structure is: <param_name> <param_value>, unless specified otherwise.
###            This structure must always be respected:
###         3) Any optional parameter that will not be used must have a 'None' entry in
###            the second column. (Do not include apostrophes in the config file!)
###
#######################################

# The file starts here #

########################
### General settings ###
########################

## Source and lens catalogues ##

# Version of the KiDS catalogue to be used. (NOT IMPLEMENTED)
KiDS_version        0.5.7

# Full path to the folder containing the KiDS catalogues to be used.
# Supersedes KiDS_version.
KiDS_path           /disks/shear10/KiDS/LF_cat_DR2_v2/

# Version of the GAMA catalogue to be used. (NOT IMPLEMENTED)
GAMA_version        v06

# Full path to the GAMA catalogue fits file. Supersedes GAMA_version.
GAMA_path           /disks/shear10/sifon/kids/gama/G3CGalv06.fits

## cosmology ##

# Matter density at z=0.
Om                  0.315           # 0 < Om <= 1

# Dark energy density at z=0.
Ol                  0.685           # must be Ol = 1 - Om

# Curvature energy density. (NOT IMPLEMENTED)
Ok                  0               # must be Ok = 0

# Reduced Hubble constant.
h                   0.7             # h = H_0/100 km/s/Mpc


######################
### ESD Production ###
######################

## Algorithm ##

# Folder where all ESD-related files will be stored. Will be created if it does not exist.
ESD_output_folder     my_esd_folder

# Suffix for the output files (optional)
ESD_output_filename   None

# What is the purpose of running this pipeline? Available options are:
#  a) 'shearcatalog': calculate the ESD.
#  b) 'shearcovariance': calculate the ESD covariance from the data (see section 3.4 of
#                        Viola et al. 2015, MNRAS, 452, 3529). The ESD comes out for free
#                        as well.
#  c) 'shearbootstrap': calculate the ESD covariance by bootstrapping KiDS fields.
#  d) 'randomcatalog': calculate the ESD around random points in the KiDS data.
#  e) 'randombootstrap': calculate the covariance of random points by bootstrapping KiDS fields.
ESD_purpose           shearcatalog

# Radial binning scheme. Options are:
#  a) Comma-separated list with (Nbins,Rmin,Rmax)
#  b) Name of file containing the bin edges (python format: include all edges, such that Nedges = Nbins+1)
#  c) An integer between 1 and 5 for standard binning schemes (NOT YET IMPLEMENTED)
Rbins                 10,20,2000

# Units of the above binning and in which all results will be presented. Options are:
#  a) Physical units {'pc', 'kpc', 'Mpc'}
#  b) Sky units {'arcsec', 'arcmin', 'deg'}
Runit                 kpc

# Number of cores you want to use to run the ESD production pipeline
ncores                3

## Lens selection

# Name of file containing GAMA ID's to be used in the analysis (optional)
lensID_file        None

# Weighting scheme to apply to the lensing signal (Margot to describe in more detail,
# do not use for now) (optional)
#lens_weights       mstarweight   ../brouwer/environment_project/mstarweight.fits
lens_weights      None

# Binning scheme (optional)
# Format: lens_binning   <bin_param>   <binning_catalogue>   <bin_edges>, where
#       <bin_param> is the parameter on which to bin (must be same name as in catalogue)
#       <binning_catalogue> should contain the parameter on which to bin, should it not be included
#                           in the GAMA catalogue (e.g., to bin by environment in Margot's project).
#                           If the parameter is included in the GAMA catalog provided above, then 
#                           write 'self'.
#       <bin_edges> Binning edges, in python format (Nedges = Nbins + 1, with bin[i-1] <= x < bin[i])
#lens_binning      None
lens_binning       envS4          self       0,1,2,3,4

# Allowed ranges for different galaxy parameters.
# Format: lens_limits[i]    <param>     <catalogue>     <limit(s)>, where
#       [i] is an indexing for the user only (e.g., lens_limits1, lens_limits2, etc)
#       <param> is the name of the parameter constraining the lens sample
#       <catalogue> is the same as <binning_catalogue> for parameter lens_binning
#       <limit(s)> is one or two comma-separated values. If one, then only galaxies with
#                  this exact value will be considered (for instance, choose RankBCG 1
#                  to use only centrals in groups); if two values then these are the limits
#                  of the allowed range.
lens_limits1      rankBCG        self       1
lens_limits2      Nfof           self       5,inf

## Source selection

# Allowed ranges in the KiDS source catalogue. The format is similar as for lens_limits
# except the <catalogue> entry does not exist.
src_limits1           Z_B        0.005,1.2


########################
### Halo model setup ###
########################

# Name of the function containing the desired model (several fiducial models
# will be implemented)
model             nfw_stack.fiducial

## Halo model parameters
# All parameters taken by the chosen model, in the same order as the model takes them.
# There are several options here (see provided examples), but the general format is:
# Format: hm_param    <param_name>    <param_type>    <param_value(s)>, where
#       hm_param is a flag that cannot be changed (but see below)
#       <param_name> is a name chosen by the user to identify each parameter. This
#                    does not need to be the same name as in the python code but it
#                    is convenient to match them.
#       <param_type> can be one of {'function', 'read', 'fixed', 'uniform', 'normal'}, where
#                    'function' is a python function. Currently only NFW profiles are
#                               implemented, but simpler profiles (e.g., SIS) can be
#                               implemented directly in the function given by <model>.
#                    'read' is a column to be read from a file.
#                    'fixed' is a fixed value for <param_name>.
#                    'uniform' is a uniform prior.
#                    'normal' is a normal prior.
#       <param_value(s)> depends on <param_type>, as follows (by "entries" here we mean space-separated):
#               if <param_type> =
#                   a) 'function': <param_value(s)> should have the name of the python function,
#                                  including the parent module (e.g., 'nfw.esd')
#                   b) 'read': <param_value(s)> has two entries, the name of the file and the
#                              column to read from said file.
#                   c) 'fixed': <param_value(s)> is a single value, that to which this parameter
#                               is fixed.
#                   d) 'uniform': <param_value(s)> has three entries, namely the lower limit, upper limit
#                                 and starting point for the MCMC.
#                   e) 'normal': <param_value(s)> has four entries, namely the central value, the dispersion,
#                                the lower limit allowed and the upper limit allowed. The starting point in
#                                the MCMC will be the central value.
# There is one exception to all of the above. A list of comma-separated values can be given only if:
#       1) the flag is set to hm_params instead of hm_param, and
#       2) <param_type> is set to 'fixed'.
hm_param          central_profile function    nfw.esd
hm_param          sat_profile     function    nfw.esd
hm_param          host_profile    function    nfw.esd_offset
hm_param          Rsat            read        brouwer/environment_project/Angsephist_envS4bin.txt 0
hm_param          n_Rsat1         read        brouwer/environment_project/Angsephist_envS4bin.txt 1
hm_param          n_Rsat2         read        brouwer/environment_project/Angsephist_envS4bin.txt 2
hm_param          n_Rsat3         read        brouwer/environment_project/Angsephist_envS4bin.txt 3
hm_param          n_Rsat4         read        brouwer/environment_project/Angsephist_envS4bin.txt 4
hm_params         fsat            fixed       0.186168,0.276374,0.374559,0.465667
hm_param          fc_sat          fixed       1.0
hm_param          Msat1           uniform     1e7     1e13      5e11
hm_param          Msat2           uniform     1e7     1e13      5e11
hm_param          Msat3           uniform     1e7     1e13      5e11
hm_param          Msat4           uniform     1e7     1e13      5e11
hm_param          fc_group        normal      1.0     0.2       0       5
hm_param          Mgroup1         uniform     1e10   1e15      5e13
hm_param          Mgroup2         uniform     1e10   1e15      5e13
hm_param          Mgroup3         uniform     1e10   1e15      5e13
hm_param          Mgroup4         uniform     1e10   1e15      5e13
hm_params         zgal            fixed       0.210286,0.232955,0.249876,0.270485
hm_params         Mstar           fixed       4.25431e+10,5.63205e+10,6.83098e+10,8.72784e+10

## Halo model output
# These are any values other than the free parameters, that the model returns. This
# includes the signal itself!
# Format: hm_output     <value(s)>      <fits_format(s)>, where
#       hm_output is a fixed flag
#       <value(s)> is a comma-separated list of names. The number of names should
#                  match the number of columns the output value contains (e.g.,
#                  if it is an ESD with shape (3,10) -- three bins and ten data points
#                  per bin -- there should be three names)
#       <fits_format(s)> is the fits format of each name. These will almost always be
#                        floats (format 'E'). If each name contains an array then the 'E'
#                        should be preceded by the number of values (e.g., '10E' in the
#                        example above).
hm_output         esd_total1,esd_total2,esd_total3,esd_total4            10E,10E,10E,10E
hm_output         esd_sat1,esd_sat2,esd_sat3,esd_sat4                    10E,10E,10E,10E
hm_output         esd_host1,esd_host2,esd_host3,esd_host4                10E,10E,10E,10E
hm_output         esd_central1,esd_central2,esd_central3,esd_central4    10E,10E,10E,10E
hm_output         Mavg1,Mavg2,Mavg3,Mavg4                                E,E,E,E


### Parameter Sampling ###


data                /disks/shear10/brouwer_veersemeer/pipeline_testresults/output_envS4bins/results_shearcovariance/shearcovariance_rankBCGm999-inf_envS4bin*of4_Z_B0p005-1p2_Rbins10-20-2000_Om0p315_Ol0p685_Ok0_h1_A.txt  0,1,4 # files containing the ESD profile.
                                              # Columns are (R,ESD_t[,1+K(R)]). Should be one file
                                              # per lens bin
covariance          /disks/shear10/brouwer_veersemeer/pipeline_testresults/output_envS4bins/results_shearcovariance/shearcovariance_matrix_rankBCGm999-inf_envS4bins4_Z_B0p005-1p2_Rbins10-20-2000_Om0p315_Ol0p685_Ok0_h1_A.txt   4,6   # file containing the covariance.
                                              # Columns are (cov[,1+K(R)]).
sampler_output       /disks/shear10/brouwer_veersemeer/mcmc_output/environment_mcmc_output.fits       # output filename (FITS format)
sampler              emcee                    # MCMC sampler
nwalkers	         500
nsteps		         600 
nburn		         0 
thin		         1 
k   		         7 
threads		         6
sampler_type	     ensemble

