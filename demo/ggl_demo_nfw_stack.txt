########################################################
########################################################
##
##  Demo configuration file for the KiDS-GGL pipeline
##
##  Update log:
##     2015-09-24 created by Cristobal Sifon
##
##
########################################################
########################################################

#######################################
###
### General instructions:
###         1) All parameters must be present in the file.
###         2) The structure is: <param_name> <param_value>, unless specified otherwise.
###            This structure must always be respected:
###         3) Any optional parameter that will not be used must have a 'None' entry in
###            the second column. (Do not include apostrophes in the config file!)
###
#######################################

# The file starts here #

########################
### General settings ###
########################

## Source and lens catalogues ##

# Full path to the folder containing the KiDS catalogues to be used and
# version of the KiDS catalogue being used. Options are 2 or 3. If you
# are using version 3 (i.e. KiDS-450) then you should also provide the
# path to the spec-z catalogue with the entry `specz_file`. If this
# entry is not given, then it is assumed that the spec-z catalogue
# is in the same location as the parent folder of individual patches.
# If you want to run the pipeline on the mocks, then select the KiDS_version = 0,
# and provide the full path and name of the used lightcone. Lenses in this case still
# conform to the GAMA-like catalogue format.
# The following paths work if you run the pipeline in Leiden.

# Option 1:
#KiDS_path           /disks/shear10/KiDS/LF_cat_DR2_v2/
#KiDS_version        2
# Option 2:
KiDS_path           /disks/shear10/dvornik/KidsCatalogues/DR3/
KiDS_version        3
# this entry is optional
specz_file          /disks/shear10/KiDS/KiDS-450/SPECZ/IMSIM_Gall30th_2016-01-14_deepspecz_photoz_1000_4_specweight.cat

# Full path to the GAMA catalogue fits file, or to another lens catalog.
# This catalog should contain at least a right ascension and a declination
# columns. If no ID column is present, IDs are automatically generated
# which corresponds to the index of each object in the catalogue (counting
# from zero). If you wish to calculate the lensing signal as a function
# of physical projected distance (as opposed to angular separations),
# then the catalog ue must also contain a redshift column.
GAMA_path           /disks/shear10/brouwer_veersemeer/MergedCatalogues/GAMACatalogue_1.0.fits

# New in v1.6: The column names for the four required column can be given
# comma-separated in the following entry. For GAMA use ID,RA,DEC,Z (or comment out).
# It is not necessary to specify a redshift column name if redshifts are not
# going to be used.
lens_columns        ID,RA,DEC,Z

# Optional usage of The-wiZZ to estimate source redshifts. Default value is 'False'.
The-wiZZ            False


## cosmology ##

# Matter density at z=0.
Om                  0.315           # 0 < Om <= 1
# Dark energy density at z=0.
Ol                  0.685           # must be Ol = 1 - Om
# Curvature energy density. (NOT IMPLEMENTED)
Ok                  0               # must be Ok = 0
# Reduced Hubble constant.
h                   1.0             # h = H_0/100 km/s/Mpc


######################
### ESD Production ###
######################

## The production of the ESD is started using the following command:
##
## kids-ggl -c ggl_demo_nfw_stack.config --esd
##
## This will only run the ESD Production part of the config file, and output:
## 1) The shearcatalog (as a fits file) if you specified 'shearcatalog' as your purpose.
## 2) The ESD profile (as txt files) of the lens sample (for each separate bin).
## 3) The covariance matrix (as a txt file) if you specified 'shearcovariance' or 'shearbootstrap' as you purpose.
##
## The input lens sample and the output folder that are used for the ESD profiles must be specified below.

## Algorithm ##

# Folder where all ESD-related files will be stored. Will be created if it does not exist.
ESD_output_folder     my_esd_folder

# Suffix for the output files (optional)
ESD_output_filename   None

# What is the purpose of running this pipeline? Available options are:
#  a) 'shearcatalog': calculate the ESD.
#  b) 'shearcovariance': calculate the ESD covariance from the data (see section 3.4 of
#                        Viola et al. 2015, MNRAS, 452, 3529). The ESD comes out for free
#                        as well.
#  c) 'shearbootstrap': calculate the ESD covariance by bootstrapping KiDS fields.
#  d) 'randomcatalog': calculate the ESD around random points in the KiDS data.
#  e) 'randombootstrap': calculate the covariance of random points by bootstrapping KiDS fields.
ESD_purpose           shearcatalog

# Radial binning scheme. Options are:
#  a) Comma-separated list with (Nbins,Rmin,Rmax). This will generate Nbins logarithmic bins between Rmin and Rmax.
#  b) Path to the txt file containing the bin edges and center.
      The txt file should contain three columns, separated by spaces, with Rmin, Rcenter and Rmax.
      Include all edges, such that Nedges = Nbins+1. See 'Rbins_demo.txt' in the 'help' folder for an example.
#  c) An integer between 1 and 5 for standard binning schemes (NOT YET IMPLEMENTED)
Rbins                 10,20,2000

# Units of the above binning and in which all results will be presented. Options are:
#  a) Physical units {'pc', 'kpc', 'Mpc'}
#  b) Sky units {'arcsec', 'arcmin', 'deg'}
Runit                 kpc

# Specify the comoving/physical scales to be used in radial source selection and Sigma_crit calculation
# Boolean parameter! Values are either 0 or 1.
comoving               0

# Number of cores you want to use to run the ESD production pipeline
ncores                3

## Lens selection

# Name of file containing GAMA ID's to be used in the analysis (optional)
lensID_file        None

# Weighting scheme (optional)
# Format: lens_weights   <weight_name>   <weight_catalogue>, where
#       <weight_name> is the name of the weight column in the fits file.
#                     The contribution to the ESD profile of each lens
#                     will be weighted by the assigned weight value.
#       <weight_catalogue> is the path to the fits file containing the weights.
#                     The weight values in the input fits file should have exactly
#                     the same order as the lenses in the used catalogue.
#lens_weights       mstarweight   ../brouwer/environment_project/mstarweight.fits
lens_weights      None

# Binning scheme (optional)
# Format: lens_binning   <bin_param>   <binning_catalogue>   <bin_edges>, where
#       <bin_param> is the parameter on which to bin (must be same name as in catalogue)
#       <binning_catalogue> is the path to the fits catalogue that contains the parameter
#                           on which to bin, should it not be included in the given lens catalogue.
#                           If the parameter is included in the lens catalog provided above, then 
#                           write 'self'.
#       <bin_edges> Comma-separated binning edges, in python format (Nedges = Nbins + 1, with bin[i-1] <= x < bin[i])
#lens_binning      None
lens_binning       envS4          self       0,1,2,3,4

# Allowed ranges for different galaxy parameters.
# Format: lens_limits[i]    <param>     <catalogue>     <limit(s)>, where
#       [i] is an indexing for the user only (e.g., lens_limits1, lens_limits2, etc).
#       <param> is the name of the parameter constraining the lens sample.
#       <catalogue> is the same as <binning_catalogue> for parameter lens_binning.
#       <limit(s)> is one or two comma-separated values. If one, then only galaxies with
#                  this exact value will be considered (for instance, choose RankBCG 1
#                  to use only centrals in groups); if two values, then these are the limits
#                  of the allowed range.
lens_limits1      rankBCG        self       1
lens_limits2      Nfof           self       5,inf

## Source selection

# Allowed ranges in the KiDS source catalogue. The format is similar as for lens_limits
# except the <catalogue> entry does not exist. When using with KiDS-450, use limits in
# range [0.1, 0.9] with 0.1 increment.
# Format: src_limits[i]    <param>      <limit(s)>
src_limits1           Z_B        0.1,0.9

kids_blinds            A,B,C

## Optional settings

# allow for a gap between the source and lens redshifts;
# i.e., only select sources such that z_s > z_l + z_epsilon (optional)
z_epsilon           0.2             # Default = 0.2

# if running shearbootstrap, select the number of patches to group in a regular patern (optional)
nbootstraps         1               # Default = 1

# if running shearcovariance or shearbootstrap, select if you want to include the cross-covariance between the bins (optional)
# Boolean parameter! Values are either 0 or 1.
cross_covariance         1          # Default = 1


########################
### Halo model setup ###
########################

## The setup below reproduces that used for the Early Science satellites project,
## Sifon et al. (2015, MNRAS, 454, 3938). All files are located in this demo folder,
## such that the results should be reproducible by running
##
##      kids_ggl -c ggl_demo_nfw_stack.config --sampler --demo
##
## (the initial values have been set to the best fits reported in the paper).

# A path to some files that may be located elsewhere, or whose path is very lengthy,
# making it convenient not having to include it in every line. This entry is the only
# optional entry
path              demo/earlyscience_satellites

# Name of the function containing the desired model (several fiducial models
# will be implemented)
model             nfw_stack.satellites

## Halo model parameters
# All parameters taken by the chosen model, in the same order as the model takes them.
# There are several options here (see provided examples), but the general format is:
# Format: hm_param    <param_name>    <param_type>    <param_value(s)>    [<join_flag>], where
#       hm_param is a flag that cannot be changed (but see below)
#       <param_name> is a name chosen by the user to identify each parameter. This
#                    does not need to be the same name as in the python code but it
#                    is convenient to match them.
#       <param_type> can be one of {'function', 'read', 'fixed', 'uniform', 'normal'}, where
#                    'function' is a python function. Currently only NFW profiles are
#                               implemented, but simpler profiles (e.g., SIS) can be
#                               implemented directly in the function given by <model>.
#                    'read' is a column to be read from a file.
#                    'fixed' is a fixed value for <param_name>.
#                    'uniform' is a uniform prior.
#                    'normal' is a normal prior.
#       <param_value(s)> depends on <param_type>, as follows (by "entries" here we mean space-separated):
#               if <param_type> =
#                   a) 'function': <param_value(s)> should have the name of the python function,
#                                  including the parent module (e.g., 'nfw.esd')
#                   b) 'read': <param_value(s)> has two entries, the name of the file and the
#                              column to read from said file. These parameters can make use of the
#                              <path> if defined above; the syntax is shown below. If the file
#                              is not in that directory or <path> has not been defined, simply write
#                              the relative path to the file in the usual way
#                   c) 'fixed': <param_value(s)> is a single value, that to which this parameter
#                               is fixed.
#                   d) 'uniform': <param_value(s)> has three entries, namely the lower limit, upper limit
#                                 and starting point for the MCMC.
#                   e) 'normal': <param_value(s)> has four entries, namely the central value, the dispersion,
#                                the lower limit allowed and the upper limit allowed. The starting point in
#                                the MCMC will be the central value.
#      <join_flag> is an optional flag, telling the pipeline that all parameters with the same flag will be 
#              grouped into a single numpy array. Its structure is 'join<i>', where <i> is an iterator that
#              must start with 1 and increase strictly by one for every new join group. In the example below,
#              there are three such groups.
# There is one exception to all of the above. A list of comma-separated values can be given only if:
#       1) the flag is set to hm_params instead of hm_param, and
#       2) <param_type> is set to 'fixed'.
hm_param          sat_profile     function    nfw.esd
hm_param          host_profile    function    nfw.esd_offset
hm_param          Rsat            read        <path>/logAngSepBCG_fine.dat 0
# the line above is equivalent to
# hm_param          Rsat            read        demo/earlyscience_satellites/logAngSepBCG_fine.dat 0
hm_param          n_Rsat1         read        <path>/logAngSepBCG_fine.dat 1        join1
hm_param          n_Rsat2         read        <path>/logAngSepBCG_fine.dat 2        join1
hm_param          n_Rsat3         read        <path>/logAngSepBCG_fine.dat 3        join1
hm_param          fc_sat          fixed       1.0
hm_param          Msat1           uniform     1e7     1e13     6.9e11        join2
hm_param          Msat2           uniform     1e7     1e13     6.9e11        join2
hm_param          Msat3           uniform     1e7     1e13    15.1e11        join2
hm_param          fc_host         uniform     0       2        0.53
hm_param          Mhost1          uniform     1e10    1e15     5e13          join3
hm_param          Mhost2          uniform     1e10    1e15     5e13          join3
hm_param          Mhost3          uniform     1e10    1e15     5e13          join3
hm_params         zgal            fixed       0.17,0.19,0.21
hm_params         Mstar           fixed       2.82e10,3.24e10,4.57e10
hm_param          Om              fixed       0.315
hm_param          Ol              fixed       0.685
hm_param          h               fixed       1


## Halo model output
# These are any values other than the free parameters, that the model returns. This
# includes the ESD signal itself. Note that the total signal *must* be the first 
# output - the pipeline assumes this when calculating the chi2.
# Format: hm_output     <value(s)>      <fits_format(s)>, where
#       hm_output is a fixed flag
#       <value(s)> is the name of the entry. If the model returns more than one value,
#                  for instance an array of ESD measurements for each observable bin (as in
#                  the example below), the output FITS file will contain one column per
#                  value, with an index appended to the specified name starting from 1.
#       <fits_format(s)> is the FITS format of the column. These will almost always be
#                        floats (format 'E'). If each name contains an array then the 'E'
#                        should be preceded by the number of values (e.g., '10E' in the
#                        example above). Note that this is the total number of data points,
#                        without accounting for bins discarded by <exclude_bins> (see below).
#                        If the given name will correspond to more than one column (e.g.,
#                        several ESDs of the same type, as in the example below) then
#                        <fits_format> should contain two comma-separated values: first the
#                        number of entries the value corresponds to, and second the FITS
#                        format of each of them.
#                 NOTE : if one of the entries is an array of scalars (say, the total mass
#                        in each bin), then there are two options (assume 3 bins):
#
#                              hm_output         Mtot            3E
#
#                        which would produce a single column in the FITS file, with three
#                        values per row (as in fits['Mtot'][0] == (3e14,4e14,5e14)), or
#
#                              hm_output         Mtot            3,E
#
#                        which would produce three separate columns in the FITS file (Mtot1,
#                        Mtot2 and Mtot3).
hm_output         esd            3,12E
hm_output         esd_sat        3,12E
hm_output         esd_host       3,12E


##########################
### Parameter sampling ###
##########################

# Path to ESD file (folders only, relative to the config file or full path; optional. Insert './' if local directory)
path_data           demo/earlyscience_satellites/

# Name of the file containing the ESDs and the columns to be read. Columns are (R,ESD_t[,1+K(R)]),
# where K(R) is the noise bias correction as per Equation 12 of Viola et al. (2015).
# If the name contains wildcards ('*'), all matching files will be read. Make sure that
# the filenames can be correctly sorted alpha-numerically!
data                esd_*.txt       0,1,4

# Any radial bins to be excluded from the analysis, numbered starting from zero.
# Note that they will be excluded from all observable bins (and consistently from the
# covariance matrix). Note that these are handled automatically by the code in terms of
# the fits format of hm_output's (i.e., if you have 14 radial bins but want to exclude
# three of them from your analysis, you should still give a fits format '14E', *not* '11E').
exclude_bins        0,1,11

# Path to covariance file. Same notes as path_data.
path_covariance     demo/earlyscience_satellites/

# This file should have the same format as those the pipeline produces; that is, it should be
# a single file with columns should be sorted by mnij where m,n are observable (e.g., logmstar)
# bins and i,j are radial bins in the ESD. Columns are (cov[,1+K(R)]).
covariance          covariance.txt   4,6

# MCMC output. Note that the chain *will* be saved into a FITS file
sampler_output       demo/earlyscience_satellites/demo_mcmc_output.fits

# MCMC sampler. The only option for now is emcee (Foreman-Mackey et al. 2013, PASP, 125, 306).
sampler              emcee

# Type of sampler used. Fixed to 'ensemble' for now.
sampler_type	     ensemble

# Number of walkers. Must be at least twice the number of free parameters, and the
# recommendation from the technical paper is to use a large number for faster convergence.
# Here we have set it to a small number simply to allow for a short chain to be run 
# out-of-the box for testing purposes.
nwalkers	         20

# Number of steps *per walker*. Total number of MCMC samples will be nwalkers*nsteps.
# Again we have set this to a small value so you can run a short chain without having
# to make any changes.
nsteps		         10 

# Number of burn-in steps. Not sure but should also be per walker.
nburn		         0 

# Thinning. This is the fraction of samples that should be saved. However I can't guarantee that
# thin!=1 will store the results properly.
thin		         1 

# Number of iterations after which progress will be saved to the output file. If this number is too
# small it may represent a significant overhead.
update_freq          200

# Apologies for the criptic name. This sets the number of bins used to sample the offset 1-halo term
# (Nbins = 2^k + 1). Each increasing k will increase runtime significantly; k=7 gives precision of 1%
# or better compared to k=10 (which would be a very fine sampling).
k   		         7 

# Number of cores, or threads, to be used to sample the MCMC.
threads		         1


