########################
### Halo model setup ###
########################

## IMPORTANT:
##
##  See ggl_demo_nfw_stack.txt in this same directory for details on the format of hm_param(s)
##  and hm_output.
##

############################
### Specific for halo.py ###
############################

# Name of the function containing the desired model (several fiducial models
# will be implemented)
model             halo.model

## Halo model parameters

# First are parameters used in for conditional luminosity/mass function and derived quantities (HOD, baryonic fractions ...).
# See Cacciato, 2009 (http://arxiv.org/abs/0807.4932) and 2013 (http://arxiv.org/abs/1207.0503) for details. Shown here are fiducial values from the later paper.

# Cosmology parameters for the halo model (reason for duplication - those can be fitted for using the sampler)

hm_param          sigma_8         fixed     0.8159
hm_param          H0              fixed     67.74
hm_param          omegam          fixed     0.3089
hm_param          omegab_h2       fixed     0.02230
hm_param          omegav          fixed     0.6911
hm_param          n               fixed     0.9667

# Redshift and effective concentration for NFW (f_c in most Marcello's papers)

hm_param          z               fixed     0.0
hm_param          f_c             fixed     1.0

# Parameters for HOD - centrals

hm_param          sigma_c         fixed     0.157
hm_param          M_0             fixed     9.95
hm_param          M_1             fixed     11.24
hm_param          gamma_1         fixed     3.18
hm_param          gamma_2         fixed     0.254

# normalization of the mass-concentration relation for the radial distribution of satellites
hm_param          fc_nsat         uniform    0.2   5.0      0.5

# Parameters for HOD - satellites

hm_param          alpha_s         fixed     -1.18
hm_param          b_0             fixed     -1.17
hm_param          b_1             fixed     1.53
hm_param          b_2             fixed     -0.217
# conversion from the characteristic stellar mass of centrals to that of satellites. TO BE IMPLEMENTED IN A LATER VERSION
#hm_param          Ac2s            fixed     0.56

# Parameters used when incorporating baryons in halo model. Values and usage as in paper from Fedeli, 2014 (http://arxiv.org/abs/1401.2997).

hm_param          alpha_star      fixed     1.0
hm_param          beta_gas        fixed     0.666666
hm_param          r_t0            fixed     0.03
hm_param          r_c0            fixed     0.05

# Parameters for miscentering (see groups paper from Viola et al. 2015) - miscentering below should be set to 1 in order to use this.

hm_param          p_off           fixed     0.5
hm_param          r_off           fixed     0.5

# Parameter to account for different large scale bias - i.e. when assessing assebmly bias (if 1, no change).

hm_param          bias            fixed     1.0

# Limits and resolution of the halo mass function. TO BE IMPLEMENTED IN A LATER VERSION
#hm_param          logM_min           fixed     5.0
#hm_param          logM_max           fixed    16.0
#hm_param          logM_step          fixed     0.01

# Luminosity or stellar mass bins. Halo model (CLF/CMF) does not differentiate between the two, so be consistent.

hm_params         logM_bin_min       fixed     9.0,9.5,10.0
hm_params         logM_bin_max       fixed     9.5,10.0,10.5

# Mean stellar mass in each luminosity or stellar mass bin - for point mass lensing signal, relevant only when NOT using include_baryons!

hm_params         Mstar              fixed     9.2,9.8,10.2

# Extra boolean parameters. Values are either 0 or 1.

# whether to use centrals and/or satellites.
hm_param          centrals           fixed     1
hm_param          satellites         fixed     1
hm_param          miscentering       fixed     0
# Switch calculation of halo model between analytical evaluation or using the Taylor series expansion (Mohammed & Seljak, 2014 - http://arxiv.org/abs/1407.0060),
hm_param          taylor_procedure fixed      0
# and incorporation of baryons in the calculation. This works, but the outputs are still dark matter only using analytic prescription. That will be made more general, until then code needs to be changed manually
hm_param          include_baryons  fixed      0
# to use simple HOD or CMF/CLF based one
hm_param          simple_hod       fixed      0

# When using simple HOD, the parameters sigma_c, M_0, M_1 and alpha_s have different meaning (check the source code) and should also be used with "join" functionality for the number of bins.


## Halo model output
hm_output         esd_total         3,10E
hm_output         Mavg              3,E
# alternative:
# hm_output         Mavg              3E


#######################
### Additonal info: ###
#######################

# The following are currently hard-coded in the halo model:
#
# - halo mass functions as defined in Tinker 2010 (http://arxiv.org/abs/1001.3162)
# - corresponding bias function also from Tinker 2010 (http://arxiv.org/abs/1001.3162)
# Note: halo mass function can always be changed when calling hmf, most popular ones are available through hmf package
# Adding another bias function means adding additional python function in halo.py module (as for now done only for Tinker2010).
#
# - c(M,z) relation is curently used from Duffy et al. 2010 (http://arxiv.org/abs/0804.2486). There are few others available in dark_matter.py, adding additional ones should be done in the same location.
# - The NFW density profile for DM components. The model is easily expandable to incorporate different density profiles or other functions, but to be consistent with other parts of the code, one should
#   first go through the detailed explanation in my master's thesis, which can be found at: https://www.dropbox.com/s/77u49ltf8448eur/thesis_final.pdf?dl=0
#
# If I have missed anything or there are more questions, don't hesitate to send me an email: dvornik@strw.leidenuniv.nl



#### Below I have copied the setup from ggl_demo_nfw_stack.py so that this config file can be used as a demo

##########################
### Parameter sampling ###
##########################

# Path to ESD file (folders only, relative to the config file or full path; optional. Insert './' if local directory)
path_data           demo/earlyscience_satellites/

# Name of the file containing the ESDs and the columns to be read. Columns are (R,ESD_t[,1+K(R)]),
# where K(R) is the noise bias correction as per Equation 12 of Viola et al. (2015).
# If the name contains wildcards ('*'), all matching files will be read. Make sure that
# the filenames can be correctly sorted alpha-numerically!
data                esd_*.txt       0,1,4

# Any radial bins to be excluded from the analysis, numbered starting from zero.
# Note that they will be excluded from all observable bins (and consistently from the
# covariance matrix). Note that these are handled automatically by the code in terms of
# the fits format of hm_output's (i.e., if you have 14 radial bins but want to exclude
# two of them from your analysis, you should still give a fits format '14E', *not* '12E').
exclude_bins        0,1

# Path to covariance file. Same notes as path_data.
path_covariance     demo/earlyscience_satellites/

# This file should have the same format as those the pipeline produces; that is, it should be
# a single file with columns should be sorted by mnij where m,n are observable (e.g., logmstar)
# bins and i,j are radial bins in the ESD. Columns are (cov[,1+K(R)]).
covariance          covariance.txt   4,6

# MCMC output. Note that the chain *will* be saved into a FITS file
sampler_output       earlyscience_satellites/demo_mcmc_output.fits

# MCMC sampler. The only option for now is emcee (Foreman-Mackey et al. 2013, PASP, 125, 306).
sampler              emcee

# Type of sampler used. Fixed to 'ensemble' for now.
sampler_type         ensemble

# Number of walkers. Must be at least twice the number of free parameters, and the
# recommendation from the technical paper is to use a large number for faster convergence.
nwalkers             500

# Number of steps *per walker*. Total number of MCMC samples will be nwalkers*nsteps.
nsteps               600

# Number of burn-in steps. Not sure but should also be per walker.
nburn                0

# Thinning. This is the fraction of samples that should be saved. However I can't guarantee that
# thin!=1 will store the results properly.
thin                 1

# Number of iterations after which progress will be saved to the output file
update_freq          10000

# Apologies for the criptic name. This sets the number of bins used to sample the offset 1-halo term
# (Nbins = 2^k + 1). Each increasing k will increase runtime significantly; k=7 gives precision of 1%
# or better compared to k=10 (which would be a very fine sampling).
k                    7

# Number of cores, or threads, to be used to sample the MCMC.
threads              6
